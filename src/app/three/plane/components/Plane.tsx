/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { Mesh } from "three";

type GLTFResult = GLTF & {
  nodes: {
    PUSHILIN_Plane_Circle000: THREE.Mesh;
    PUSHILIN_Plane_Helix: THREE.Mesh;
  };
  materials: {
    plane: THREE.MeshStandardMaterial;
  };
};

const HELIX_SPEED = 6;

export function Plane(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/plane.glb") as GLTFResult;
  const helix = useRef<Mesh>(null);
  useFrame((state, delta) => {
    if (helix.current) {
      helix.current.rotation.x += delta * HELIX_SPEED;
    }
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.PUSHILIN_Plane_Circle000.geometry}
        material={materials.plane}
      />
      <mesh
        ref={helix}
        castShadow
        receiveShadow
        geometry={nodes.PUSHILIN_Plane_Helix.geometry}
        material={materials.plane}
        position={[1.09, 0.23, 0]}
      />
    </group>
  );
}

useGLTF.preload("/models/plane.glb");
